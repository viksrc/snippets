import pymc as pm
import numpy as np
import pandas as pd
import plotly.graph_objects as go

# Example DataFrame for demonstration (replace with your actual data loading step)
data = pd.DataFrame({
    'OrderSize': [0.2, 0.3, 0.1, 0.4],
    'Volatility': [15, 25, 10, 20],
    'Spread': [10, 12, 8, 11],
    'Cost': [5, -3, 8, 2]
})

# Run your PyMC model and obtain the trace
with pm.Model() as model:
    # Define priors and model here...
    beta0 = pm.Normal('beta0', mu=0, sigma=10)
    beta1 = pm.Normal('beta1', mu=0, sigma=10)
    beta2 = pm.Normal('beta2', mu=0, sigma=10)
    gamma0 = pm.Normal('gamma0', mu=0, sigma=10)
    gamma1 = pm.Normal('gamma1', mu=0, sigma=10)
    gamma2 = pm.Normal('gamma2', mu=0, sigma=10)
    alpha0 = pm.Normal('alpha0', mu=0, sigma=10)
    alpha1 = pm.Normal('alpha1', mu=0, sigma=10)

    # Model equations for ALD
    mu = -pm.math.exp(beta0 + beta1 * pm.math.log(data['OrderSize']) + beta2 * pm.math.log(data['Volatility']))
    b = pm.math.exp(gamma0 + gamma1 * pm.math.log(data['OrderSize']) + gamma2 * pm.math.log(data['Volatility']))
    r = pm.math.exp(alpha0 + alpha1 * pm.math.log(data['OrderSize']))
    kappa = 0.5 * (r + pm.math.sqrt(4 + r**2))  # Asymmetry parameter transformation

    # Define the ALD likelihood
    Y_obs = pm.AsymmetricLaplace('Y_obs', mu=mu, b=b, kappa=kappa, observed=data['Cost'])

    # Sample from the posterior
    trace = pm.sample(1000, tune=1000, target_accept=0.95, return_inferencedata=True)

beta0_samples = trace.posterior['beta0'].values.flatten()
beta1_samples = trace.posterior['beta1'].values.flatten()
beta2_samples = trace.posterior['beta2'].values.flatten()
gamma0_samples = trace.posterior['gamma0'].values.flatten()
gamma1_samples = trace.posterior['gamma1'].values.flatten()
gamma2_samples = trace.posterior['gamma2'].values.flatten()
alpha0_samples = trace.posterior['alpha0'].values.flatten()
alpha1_samples = trace.posterior['alpha1'].values.flatten()

# Define a custom function to sample from the Asymmetric Laplace Distribution
def asymmetric_laplace(loc, scale, kappa, size=1):
    u = np.random.uniform(0, 1, size)
    sample = loc + (scale / kappa) * np.where(u < 1 / (1 + kappa), 
                                              np.log(u * (1 + kappa)), 
                                              -np.log((1 - u) * (1 + kappa)))
    return sample

# Generate predicted costs by sampling from the fitted ALD for each observation using multiple posterior samples
predicted_costs = []

# Use a subset of posterior samples to generate predicted costs
for i in range(len(data)):
    for j in range(100):  # Use 100 posterior samples for predictions
        mu_pred = -np.exp(
            beta0_samples[j] +
            beta1_samples[j] * np.log(data['OrderSize'][i]) +
            beta2_samples[j] * np.log(data['Volatility'][i])
        )
        b_pred = np.exp(
            gamma0_samples[j] +
            gamma1_samples[j] * np.log(data['OrderSize'][i]) +
            gamma2_samples[j] * np.log(data['Volatility'][i])
        )
        r_pred = np.exp(
            alpha0_samples[j] +
            alpha1_samples[j] * np.log(data['OrderSize'][i])
        )
        kappa_pred = 0.5 * (r_pred + np.sqrt(4 + r_pred**2))
        
        # Draw samples from ALD for each observation
        predicted_costs.append(asymmetric_laplace(loc=mu_pred, scale=b_pred, kappa=kappa_pred, size=1))
predicted_costs = np.concatenate(predicted_costs)

# Plot observed vs. predicted costs using histograms
fig = go.Figure()

# Add histogram of observed costs
fig.add_trace(go.Histogram(
    x=data['Cost'],
    nbinsx=20,
    name='Observed Cost',
    histnorm='probability density',  # Normalize to form a probability density
    marker=dict(color='rgba(0, 0, 255, 0.5)')
))

# Add histogram of predicted costs
fig.add_trace(go.Histogram(
    x=predicted_costs,
    nbinsx=20,
    name='Predicted Cost',
    histnorm='probability density',  # Normalize to form a probability density
    marker=dict(color='rgba(255, 0, 0, 0.5)')
))

# Update layout
fig.update_layout(
    title='Observed vs. Predicted Costs',
    xaxis_title='Cost',
    yaxis_title='Density',
    barmode='overlay'
)

fig.show()
